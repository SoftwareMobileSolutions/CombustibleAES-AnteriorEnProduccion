@model CombustibleAES.Models.LogIn
@{
    Layout = "";
}

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Modulo Control de Ingreso de Combustible</title>
    <link href='https://fonts.googleapis.com/css?family=Roboto:300italic,400italic,300,400,500,700,900' rel='stylesheet' type='text/css' />
    <!-- jQuery -->
    @*<script type="text/javascript" src="~/Scripts/JQuery.js"></script>*@
    <script type="text/javascript" src="@Url.Content("~/bundles/jquery")"></script>
    <!-- BS JavaScript -->
    <script type="text/javascript" src="~/Scripts/bootstrap.js"></script>
    <!-- SweetAlert JavaScript -->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- toastr JavaScript -->
    <script src="~/Scripts/toastr.min.js"></script>

    <link href="@Url.Content("~/Content/cssLogin")" class="login_" rel="stylesheet" />
    <link href="~/Content/LoginCss/sweetalert.css" rel="stylesheet" />
    <link href="~/Content/LoginCss/toastr.min.css" rel="stylesheet" />
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-regular-straight/css/uicons-regular-straight.css'>
    @*<script src="~/Scripts/JQuery.js"></script>*@
    <script>
        $(document).ready(function () {
            $('input[type=submit]').addClass('btn btn-primary');
            $('input[type=button]').addClass('btn btn-success');
            $('body').addClass('bgColor0');
        });
    </script>
    <style type="text/css">
        :root {
            --primary-color: hsl(210, 100%, 56%);
            --primary-color-light: hsl(205, 100%, 56%);
            --white-color: hsl(0, 0%, 100%);
            --success-color: hsl(152, 90%, 32%);
            --success-color-dark: hsla(152, 81%, 32%, 0.25);
            --error-color: hsl(354, 70%, 54%);
            --error-color-light: hsla(354, 60%, 52%, 0.945);
            --error-color-dark: hsla(354, 67%, 51%, 0.25);
            --text-dark: #020625;
            --body-bgcolor: hsl(0, 0%, 96%);
            --border-color: hsla(197, 68%, 73%, 0.349);
        }

        .mensaje {
            color: red;
        }

        body {
            overflow: hidden;
            height: 100%;
            margin: 0;
            background: none;
        }

        html {
            /*  background: url(https://theartmad.com/wp-content/uploads/Dark-Blue-Grey-Background-6.jpg) no-repeat center center fixed;*/
            background: url('../Imagenes/Login/WallCombustible.jpg') no-repeat center center fixed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
        }

        #login {
            margin: 0;
            position: absolute;
            top: 50%;
            left: 50.7%;
            transform: translate(-50%, -50%);
        }

        .logo {
            position: absolute;
            z-index: 2;
            top: 140px;
            left: 70px;
            position: absolute;
            z-index: 2;
        }

        .modalPassword, .modalRecovery {
            width: 35%;
            background: white;
            position: absolute;
            border-radius: 10px;
            overflow: auto;
            top: 4%;
            z-index: 2;
            left: 32%;
            padding: 2%;
            min-height: 400px;
        }

        .imgLogo {
            height: 20px;
            top: -10px;
            position: relative;
            left: -18px;
        }

        .box {
            position: absolute;
            z-index: 2;
            top: 260px;
            left: 70px;
            position: absolute;
            z-index: 2;
        }

        .pass {
            position: absolute;
            z-index: 2;
            top: 330px;
            left: 70px;
            position: absolute;
            z-index: 2;
        }

        .entrar {
            position: absolute;
            z-index: 2;
            top: 390px;
            left: 70px;
            position: absolute;
            z-index: 2;
        }

        .nomalcase {
            text-transform: none !important;
        }

        #login .imglogin {
            height: 650px;
        }

        .myOwnOverlay, .myOwnOverlay2 {
            position: fixed; /* Positioning and size */
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(128,128,128,0.5); /* color */
            display: none; /* making it hidden by default */
        }

        .form-group .form-control ~ label:after, .form-group .form-control ~ .form-control-line:after {
            background-color: #31e6fa;
        }

        .form-group .form-control:focus ~ label {
            color: #031d4a;
        }

        em {
            color: #fff;
            bottom: 0px;
            position: fixed;
            z-index: 1;
            right: 45px;
        }

        #lblMensajelogin {
            color: Red;
            position: absolute;
            bottom: 181px;
            left: 67px;
            bottom: 146px;
            font-size: 11px !important;
        }

        .formCPass {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background-color: var(--white-color);
            padding: 1.5rem 1.8rem;
            width: 350px;
            border-radius: 0.5rem;
            box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
            margin-left: 15%;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: bold;
            padding: 5px;
            color: var(--text-dark);
            text-align: center;
            margin-bottom: 1.25rem;
        }

        .field {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .label-title {
            display: block;
            margin-bottom: 0.25rem;
        }

        input,
        textarea,
        select {
            border: solid 1px hsl(0, 2%, 56%);
            border-radius: 3px;
            display: inline-block;
            padding: 0.8rem 0.8rem;
            width: 100%;
            font-family: inherit;
            font-size: 1rem;
        }

            input::placeholder {
                color: hsl(210, 1%, 44%);
            }

            input:focus,
            textarea:focus,
            select:focus {
                outline: none;
                border: solid 2px var(--border-color);
                box-shadow: 0 4px 6px -1px var(--border-color);
            }

        .btnPass {
            display: inline-block;
            padding: 0.9rem 1.8rem;
            margin-top: 0.5rem;
            outline: 0;
            border: none;
            background-color: var(--primary-color);
            color: var(--white-color);
            font-weight: bolder;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 1.3rem;
            box-shadow: 0 4px 6px -1px hsla(197, 80%, 77%, 0.281);
        }

            .btnPass:hover,
            .btnPass:active {
                background-color: var(--primary-color-light);
                transform: scaleY(0.99);
            }

            .btnPass:focus {
                outline: 2px dotted hsl(210, 39%, 59%);
                outline-offset: 2px;
            }

        .btnCancel {
            display: inline-block;
            outline: 0;
            border: none;
            background-color: var(--error-color);
            padding: 0.9rem 1.8rem;
            color: var(--white-color);
            font-weight: bolder;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 1.3rem;
            box-shadow: 0 4px 6px -1px hsla(197, 80%, 77%, 0.281);
            margin-top: 0.5rem;
        }

            .btnCancel:hover,
            .btnCancel:active {
                background-color: var(--error-color-light);
                transform: scaleY(0.99);
            }

            .btnCancel:focus {
                outline: 2px dotted hsl(210, 39%, 59%);
                outline-offset: 2px;
            }

        input[disabled],
        textarea[disabled] {
            background-color: var(--body-bgcolor);
            box-shadow: none;
            color: hsl(0, 0%, 48%);
            cursor: not-allowed;
        }

        /* input error */
        input.error,
        textarea.error,
        select.error {
            border-color: var(--error-color);
        }

            input.error::placeholder,
            textarea.error::placeholder,
            select.error::placeholder {
                color: var(--error-color-light);
            }

            input.error:focus,
            textarea.error:focus,
            select.error:focus {
                box-shadow: 0 0 0 0.25rem --error-color-dark;
            }

        /* input success */
        input.success,
        textarea.success,
        select.success {
            border-color: var(--success-color);
        }

        span.small {
            font-size: 1rem;
            color: var(--error-color);
            margin-left: 5px;
        }

        .password-label {
            position: relative;
            display: block;
        }

        .toggle-password {
            font-size: 2rem;
            display: block;
            position: absolute;
            right: 5px;
            top: 25px;
            cursor: pointer;
            color: var(--primary-color);
            padding: 5px;
        }

        i.toggle-password:hover {
            transform: scale(0.95);
            color: var(--primary-color-light);
        }

        i.toggle-password:focus {
            /* outline: 1px solid var(--primary-color-light); */
            color: var(--primary-color-light);
        }
    </style>
</head>
<body class="section-body contain-lg">
    @*<form id="form1"> Comentario de Login.  *@
    @using (Html.BeginForm(new { ReturnUrl = Request.QueryString["ReturnUrl"] }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div id="login">
            <div class="col-lg-12">
                <div class="form">
                    <div class="col-sm-12">
                        <div class="logo form-group">
                            <img class="imgLogo" src="../Imagenes/logoAES2020.png">
                            <div style="height: 48px;top: -8px;position: relative;left: 12px;">
                                <span style="position: relative;top: 18px;left: -12px;font-weight: 500;font-size: 14px;color: #6b6b6b;line-height: 0;background-color: transparent;">Control de Vales</span>
                                <span style="position: relative;top: 42px;left: -119px;font-weight: 500;font-size: 14px;color: #6b6b6b;line-height: 0;background-color: transparent;"> de Combustible/Taxi</span>
                            </div>
                        </div>
                        <div class="box form-group">

                            @(Html.Kendo().TextBoxFor(m => m.usuario)
                            .Name("usuario")
                            .HtmlAttributes(new { placeholder = "Nombre de Usuario", required = "required", tabindex = "2", validationmessage = "Enter {0}", @class = "form-control" }))
                            <label for="username">Usuario</label>
                        </div>
                        <div class="pass form-group">

                            @(Html.Kendo().TextBoxFor(m => m.contrasenia)
                            .Name("contrasenia")
                            .HtmlAttributes(new {type="password", placeholder = "Contraseña", required = "required", tabindex = "3", validationmessage = "Enter {0}", @class = "form-control" }))
                            <label for="password">Contraseña</label>
                        </div>
                        <div class="entrar form-group">
                            <button class="btn btn-primary-dark" tabindex="4" type="button" onclick="fnPasswordValidate();">Entrar </button><br />
                            <div style="margin-left:-26px; color:blue;">
                                <a href="#modalRecovery" onclick="fnOpenModalRecovery();">¿Olvidaste tu Contraseña?</a>
                            </div>
                        </div>

                    </div>

                    <img class="imglogin" src="../imagenes/Login/login.png" />
                </div>

            </div>

        </div>
        <div class="section-body contain-lg">
            <div class="row">
                <div class="col-lg-12">
                    <em class="text-caption footer">© 2019 Powered by<a href="http://www.sms-open.com/index.html" target="_blank"> Software Mobile Solutions S.A.</a></em>
                </div>
            </div>
        </div>
    }

    <div class="myOwnOverlay2">
        <div class="modalRecovery">
            <div class="text-center"><h2><b>RECUPERAR CONTRASEÑA</b></h2></div>
            <form action="" class="formCPass" id="recoveryPass">
                <div class="row text-center">
                    <div class="field">
                        <label for="usrname">
                            <span class="label-title"> Usuario: </span>
                            <input type="text" name="usrname" id="usrname" placeholder="Ingrese su nombre de usuario" />
                        </label>

                        <span class="small"></span>
                    </div>
                    <div class="field">
                        <label for="email">
                            <span class="label-title">Correo:</span>
                            <input type="email" name="email" id="email" placeholder="correo@ejemplo.com" />
                        </label>
                        <span class="small"></span>
                    </div>
                    <div class="text-center">
                        <button class="btn btn-success" type="button" onclick="fnRecoveryPass();">Recuperar Usuario</button>
                        <button class="btnCancel" type="button" onclick="fnCerraRecoveryModal();">Cancelar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="myOwnOverlay">
        <div class="modalPassword">
            <div class="text-center"><h2><b>ACTUALIZAR CONTRASEÑA</b></h2></div>
            <form action="" class="formCPass" id="changePassByExpiration">
                <div class="row text-center">
                    <div class="field">
                        <label for="txtCurrentPassword" class="password-label">
                            <span class="label-title">Contraseña Actual</span>
                            <input type="password" id="txtCurrentPassword" placeholder="Contraseña Actual" />
                            <i tabindex="0" class="fi fi-rs-eye fi-rs-crossed-eye toggle-password" id="OldPass"></i>
                        </label>
                        <span class="small"></span>
                    </div>
                    <div class="field">
                        <label for="txtNewPassword" class="password-label">
                            <span class="label-title">Nueva Contraseña</span>
                            <input type="password" id="txtNewPassword" placeholder="Nueva Contraseña" />
                            <i tabindex="0" class="fi fi-rs-eye fi-rs-crossed-eye toggle-password" id="NewPass"></i>
                        </label>
                        <span class="small"></span>
                    </div>
                    <div class="field">
                        <label for="txtConfirmNewPassword" class="password-label">
                            <span class="label-title">Confirme Contraseña</span>
                            <input type="password" id="txtConfirmNewPassword" placeholder="Confirme Contraseña" />
                            <i tabindex="0" class="fi fi-rs-eye fi-rs-crossed-eye toggle-password" id="ConfirmPass"></i>
                        </label>
                        <span class="small"></span>
                    </div>
                </div>
                <div class="text-center">
                    <button class="btnPass" type="button" onclick="fnGuardarPass();">Guardar</button>
                    <button class="btnCancel" type="button" onclick="fnCerraModal();">Cancelar</button>
                </div>
            </form>
        </div>

        @*<div class="modalPassword">
                <div class="text-center"><h2><b>CAMBIAR CONTRASEÑA</b></h2></div>
                <hr>
                <div class="row ">
                    <div class="input-group">
                        <div class="col-lg-12 col-lg-offset-2">
                            <input style="width: 100% !important;" type="password" class="form-control text-center" id="txtCurrentPassword" placeholder="Contraseña Antigua"/>
                                <i tabindex="0" class="bx bx-show bx-low-vision toggle-password" id="pass"></i>
                            <input style="width: 100% !important;" type="password" class="form-control text-center" id="txtNewPassword" placeholder="Contraseña Nueva" />
                            <input style="width: 100% !important;" type="password" class="form-control text-center" id="txtConfirmNewPassword" placeholder="Repita Contraseña Nueva" />
                        </div>
                    </div><br />
                    <div class="col-lg-3"></div>
                    <div class="col-lg-3">
                        <button class="btn btn-success" onclick="fnGuardarPass();">Guardar</button>
                    </div>
                    <div class="col-lg-3">
                        <button class="btn btn-danger" onclick="fnCerraModal();">Cancelar</button>
                    </div>
                    <div class="col-lg-3"></div>
                </div>
            </div>*@
    </div>

    <script>

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-bottom-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        $(window).ready(function () {
            /*$(".modalPassword").hide()*/
            /*$(".modalRecovery").hide();*/

            if (window.location.hostname != "localhost") {
                var ruta1 = window.location.pathname.split("/")[1] + "/Imagenes/logoAES2020.png";
                var ruta2 = window.location.pathname.split("/")[1] + "/Imagenes/Login/login.png"
                $(".imgLogo").attr("src", "../../" + ruta1);
                $(".imglogin").attr("src", "../../" + ruta2);
            }
        });

        function fnCerraModal() {
            $("#txtNewPassword").val("");
            $("#txtConfirmNewPassword").val("");
            $("#txtCurrentPassword").val("");
            $(".modalPassword").hide();
            $('.myOwnOverlay').hide();
        }

        function fnCerraRecoveryModal() {
            $(".modalRecovery").hide();
            $('.myOwnOverlay2').hide();
        }

        function fnPasswordValidate() {
            var obj = {
                usuario: $("#usuario").val(),
                contrasenia: $("#contrasenia").val()
            };

            $.post("../Login/ValidatePasswordDate", obj, function (d) {
                console.log(d);
                if (d > 0) {
                    window.location.href = "../Home/Index/";
                } else if (d < 0) {
                    Swal.fire({
                        title: '¡Su contraseña ha expirado!',
                        text: "¡Es necesario cambiar la contraseña para continuar!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: '¡Si, Modificar!',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('.myOwnOverlay').show();
                            $(".modalPassword").fadeIn();
                        } else {
                            Swal.fire('Advertencia!', 'Si no se efectua el cambio de contraseña, no podra ingresar al sistema!', 'warning')
                        }
                    })
                } else {
                    toastr["warning"]("Las contraseña ingresada no es correcta, intente nuevamente!");
                }
            });
        }

        function fnGuardarPass() {
            var user = $("#usuario").val();
            var pass = $("#contrasenia").val();
            var newPass = $("#txtNewPassword").val();
            const isPasswordIcon = validatePassword(passwordInput, passwordRequired, passwordInvalid);
            const isConfirmPasswordIcon = validateConfirmPassword(passwordInput, confirmPasswordInput);
            const isCurrentPasswordIcon = validateCurrentPassword(currentPasswordInput, pass);

            if (isPasswordIcon === true && isConfirmPasswordIcon === true && isCurrentPasswordIcon === true) {
                $.post("../Login/UpdatePassByExpired", { iUserName: user, iPassword: pass, iNewPass: newPass }, function (d) {
                    if (d === 1) {
                        /*Swal.fire('BIEN!', 'La contraseña fue actualizada con Exito!', 'success')*/
                        Swal.fire({
                            title: '¡BIEN!',
                            text: "¡Su contraseña se ha actualizado con exito!",
                            icon: 'success',
                            showCancelButton: false,
                            allowOutsideClick: false
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = "../Home/Index/";
                            }
                        })
                    } else if (d === 2) {
                        Swal.fire('ERROR!', 'La contraseña que digito, ya ha sido usada, ingrese una nueva contraseña!', 'error')
                        $("#txtNewPassword").val("");
                        $("#txtConfirmNewPassword").val("");
                        $("#txtNewPassword").focus();
                    } else {
                        Swal.fire('ERROR!', 'La contraseña que digito, no es la correcta, intente nuevamente!', 'error')
                        $("#txtCurrentPassword").val("");
                        $("#txtCurrentPassword").focus();
                    }
                });
            } else {
                toastr["warning"]("Uno de los campos no es correcto, verifique el formulario nuevamente!");
            }
        }


        const isBetween = (length, min, max) =>
            length < min || length > max ? false : true;

        const showMessage = (input, message, type) => {
            const msgSpan = input.closest(".field").querySelector(".small");
            msgSpan.innerHTML = message;

            input.className = type ? "success" : "error";
            return type;
        };

        const showErrorMessage = (input, message) => {
            return showMessage(input, message, false);
        };

        const showSuccessMessage = (input) => {
            return showMessage(input, "", true);
        };

        const hasValue = (input, message) => {
            if (input.value.trim("") === "") {
                return showErrorMessage(input, message);
            }

            return showSuccessMessage(input);
        };

        const validatePassword = (input, requiredMsg, passwordValidityMsg) => {
            if (!hasValue(input, requiredMsg)) {
                return false;
            }

            const passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,}$/;

            const password = passwordInput.value.trim();
            if (!passwordRegex.test(password)) {
                return showErrorMessage(input, passwordValidityMsg);
            }

            return true;
        };

        const validateConfirmPassword = (passwordInput, confirmPasswordInput) => {
            if (!hasValue(confirmPasswordInput, "Por favor confirme la contraseña!")) {
                return false;
            }
            const password = passwordInput.value.trim();
            const confirmPassword = confirmPasswordInput.value.trim();

            if (password !== confirmPassword) {
                return showErrorMessage(confirmPasswordInput, "<b>Las contraseñas no coinciden</b>");
            }
            return showSuccessMessage(confirmPasswordInput);
        };

        const validateCurrentPassword = (passwordInput, currentPassword) => {
            if (!hasValue(currentPasswordInput, "Por favor introduzca la contraseña actual!")) {
                return false;
            }

            const pass = passwordInput.value.trim();

            if (pass !== currentPassword) {
                return showErrorMessage(currentPasswordInput, "<b>Las contraseñas no coinciden</b>");
            }

            return showSuccessMessage(currentPasswordInput);
        }

        const passwordRequired = "Por favor cree una contraseña!";
        const confirmPasswordRequired = "Por favor confirme la contraseña";
        const passwordInvalid = `
       <b>Asegurate de que la contraseña tenga:</b>
       <ul>
          <li><b>al menos 8 caracteres</b></li>
          <li><b>al menos 1 letra mayúscula</b></li>
          <li><b>al menos 1 letra minúscula</b></li>
          <li><b>al menos 1 número</b></li>
          <li><b>al menos 1 caracter especial</b></li>
       </ul>
`;

        const signUpForm = document.querySelector("form#changePassByExpiration");
        const recoveryPassForm = document.querySelector("form#recoveryPass");
        const passwordInput = signUpForm.querySelector("input#txtNewPassword");
        const confirmPasswordInput = signUpForm.querySelector("input#txtConfirmNewPassword");
        const currentPasswordInput = signUpForm.querySelector("input#txtCurrentPassword")
        const togglePasswordIcons = signUpForm.querySelectorAll(".toggle-password");

        const showHidePassword = (input) => {
            const type = input.getAttribute("type") === "password" ? "text" : "password";
            input.setAttribute("type", type);
        };

        togglePasswordIcons.forEach((togglePasswordIcon) => {
            togglePasswordIcon.addEventListener("click", (event) => {
                console.log(event.target.id);
                const isPasswordIcon = event.target.id == "NewPass";
                const isConfirmPasswordIcon = event.target.id === "ConfirmPass";
                const isCurrentPasswordIcon = event.target.id === "OldPass";

                if (isPasswordIcon) {
                    showHidePassword(passwordInput);
                    event.target.classList.toggle("fi-rs-eye");
                }

                if (isConfirmPasswordIcon) {
                    showHidePassword(confirmPasswordInput);
                    event.target.classList.toggle("fi-rs-eye");
                }

                if (isCurrentPasswordIcon) {
                    showHidePassword(currentPasswordInput);
                    event.target.classList.toggle("fi-rs-eye");
                }
            });
        });


        signUpForm.addEventListener("input", (event) => {
            console.log(event.target.id);

            const target = event.target;

            if (target.id === "txtNewPassword") {
                validatePassword(passwordInput, passwordRequired, passwordInvalid);
            }

            if (target.id === "txtConfirmNewPassword") {
                validateConfirmPassword(passwordInput, confirmPasswordInput);
            }

            if (target.id === "txtCurrentPassword") {
                const currntPass = $("#contrasenia").val().trim();
                validateCurrentPassword(currentPasswordInput, currntPass);
            }
        });

        signUpForm.addEventListener("submit", (event) => {
            event.preventDeafult();
        });

        function fnOpenModalRecovery() {
            $(".myOwnOverlay2").fadeIn();
            $(".modalRecovery").fadeIn();
        }


        const validateEmail = (input, requiredMsg, invalidMsg) => {
            if (!hasValue(input, requiredMsg)) {
                return false;
            }

            const emailRegex = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

            const email = input.value.trim();
            if (!emailRegex.test(email)) {
                return showErrorMessage(input, invalidMsg);
            }
            return true;
        };

        const validateUsername = (input, requiredMsg) => {
            if (!hasValue(input, requiredMsg)) {
                return false;
            }
            return showSuccessMessage(input);
        };

        const usernameRequired = "Por favor ingrese su nombre de usuario!";
        const emailInvalid = "Por favor ingrese un correo valido!";
        const emailRequired = "Por favor ingrese su correo!";

        recoveryPassForm.addEventListener("input", (event) => {
            const targetE = event.target;
            var emailInput = recoveryPassForm.querySelector("input#email");
            var nameInput = recoveryPassForm.querySelector("input#usrname");

            if (targetE.id === "email") {
                validateEmail(emailInput, emailRequired, emailInvalid);
            }

            if (targetE.id === "usrname") {
                validateUsername(nameInput, usernameRequired);
            }
        })

        function generateP() {
            var pass = '';
            var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
                    'abcdefghijklmnopqrstuvwxyz0123456789@@#$';

            for (i = 0; i <= 8; i++) {
                var char = Math.floor(Math.random()
                            * str.length + 1);

                pass += str.charAt(char)
            }

            return pass;
        }

        function fnRecoveryPass() {
            var emailInput = recoveryPassForm.querySelector("input#email");
            var nameInput = recoveryPassForm.querySelector("input#usrname");

            const isUserIcon = validateUsername(nameInput, usernameRequired);
            const isEmailIcon = validateEmail(emailInput, emailRequired, emailInvalid);

            var user = $("#usrname").val();
            var email = $("#email").val();
            var randomPass = generateP();

            if (isUserIcon === true && isEmailIcon === true) {
                $.post("../Login/RecoveryPassService", { iUser: user, iEmail: email, iRandomPass: randomPass }, function (data) {
                    if (data === 1) {
                        Swal.fire('BIEN!', 'Se ha enviado un correo electronico con la informacion de recuperacion de clave!', 'success')
                    } else if (data === 0) {
                        Swal.fire('OOPS!', 'No se ha encontrado al usuario asociado al correo digitado, verifique nuevamente', 'warning')
                    } else {
                        Swal.fire('ERROR!', 'Parece que algo salio mal, intente nuevamente', 'error')
                    }
                });
            } else {
                toastr["warning"]("Uno de los campos no es correcto, verifique el formulario e intente nuevamente!");
            }
        }
    </script>
</body>
</html>