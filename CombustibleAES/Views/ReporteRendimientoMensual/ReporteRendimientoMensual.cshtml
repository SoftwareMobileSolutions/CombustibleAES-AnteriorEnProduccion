@{
    ViewBag.Title = "Combustible AES | Reportes Combustible > Rendimiento Mensual";
}

<link href="~/Content/plantilla/css/plugins/toastr/toastr.min.css" rel="stylesheet" />
<link href="../Content/plantilla/css/animate.css" rel="stylesheet" />

<script src="~/Content/plantilla/js/plugins/toastr/toastr.min.js"></script>
<script type="text/javascript">
    var selected = 0;
    var dt = [];
    var y = new Date().getFullYear();
    var yToken = 0;
    var tokenGrafica = 0;
    var readExcels = 0;
    var firstRender = 1;
    var tipoTabla = 1; //1 Vista normal; 2 Tipo de flota y compañía

    function GenerarMensaje(titulo, texto, tipo) {
        ///<summary>Genera mensajes</summary>
        ///<param name="titulo" type="string">Titulo que lleva el mensaje</param>
        ///<param name="texto" type="string">Cuerpo del mensaje</param>
        ///<param name="tipo" type="number">1-Informacion, 2-Exito, 3-Advertencia, 4-Error</param>
        switch (tipo) {
            case 1:
                toastr.info(texto, titulo);
                break;
            case 2:
                toastr.success(texto, titulo);
                break;
            case 3:
                toastr.warning(texto, titulo);
                break;
            case 4:
                toastr.error(texto, titulo);
                break;
        }
    }


    function duplicado(str, array) {
        for (i = 0; i < array.length; i++) {
            if (array[i].name === str) {
                return true;
            }
        };
        return false;
    }

    /// <summary>
    /// Se encarga de agregar o no los archivos que han sido seleccionados por el usuario
    /// </summary>
    /// <param name="e">Evento</param>
    /// <returns>void</returns>
    function excels_select(e) {
        warnings = 0;
        if (e.files.length < 3) {
            if ((e.files.length + selected) < 3) {
                $.each(e.files, function (i) {
                    if (e.files[i].extension == ".xlsx" || e.files[i] == ".xls") {
                        if (duplicado(e.files[i].name, dt) === false) {
                            dt.push(e.files[i]);
                        }
                        else {

                            GenerarMensaje("Aviso", "Los archivos duplicados no serán tomados en cuenta.", 3);
                            e.preventDefault();
                            warnings++;
                        }
                    }
                    else {
                        e.preventDefault();
                        GenerarMensaje("Aviso", "Solo se admiten archivos con extensión '.xlsx' ó '.xls'.", 3);
                        warnings++;
                    }
                });
                if (warnings <= 0) {
                    for (i = 0; i < e.files.length; i++) {
                        selected++;
                        $("#limpiarArchivos").removeAttr("disabled");
                    }
                }
                else {
                    dt.splice(dt.length - 1, 1);
                }
                e.files = dt;
                if (selected == 2) {
                    readExcels = 1;
                }
            }
            else {
                e.preventDefault();
                GenerarMensaje("Aviso", "No puede exceder el máximo de 2 archivos subidos por total.", 3);
            }
        }
        else {
            e.preventDefault();
            GenerarMensaje("Aviso", "Por favor seleccione un máximo de 2 archivos.", 3);
        }
    }

    function get_filtro() {
        return {
            year: $("#years").data("kendoDropDownList").value(),
            month: $("#meses").data("kendoDropDownList").value(),
            token: readExcels,
        }
    }

    function getYear() {
        value = $("#years").data("kendoDropDownList").value() == "" ? 0 : ($("#years").data("kendoDropDownList").value() == y ? 0 : $("#years").data("kendoDropDownList").value());
        return {
            year: value
        }
    }

    function getFiltroGrafica() {
        return {
            year: parseInt($("#years").data("kendoDropDownList").value()),
            month: parseInt($("#meses").data("kendoDropDownList").value()),
            filtro: parseInt($("#filtroList").data("kendoDropDownList").value())
        }
    }

    function readGrafica() {
        titulo = $("#filtroList").data("kendoDropDownList").text();
        $("#grafica").data("kendoChart").options.title.text = titulo + " - " + $("#meses").data("kendoDropDownList").text() + " " + $("#years").data("kendoDropDownList").text();
        $("#grafica").data("kendoChart").dataSource.read();
    }

    function filtro_Change() {
        readGrafica();
    }

    function filtro_dataBound() {
        readGrafica();
    }

    function grafica_render(e) {
        //tokenGrafica++;
    }

    function grafica_dataBound() {
        tokenGrafica++;
        if (tokenGrafica == 1) {
            data = $("#grafica").data("kendoChart").dataSource.data();
            maxValue = 0;
            majorUnit = 10;
            $.each(data, function (i) {
                if (data[i].Y > maxValue) { maxValue = data[i].Y; }
            });
            maxValue += 10;
            maxValue = parseInt(maxValue);
            //majorUnit = ((maxValue % 10) * 10) + 10;

            majorUnit = parseInt(Math.pow(10, (maxValue.toString().length - 1)));
            //console.log(maxValue);
            $("#grafica").data("kendoChart").options.valueAxis.max = maxValue;
            $("#grafica").data("kendoChart").options.valueAxis.majorUnit = majorUnit;
            $("#grafica").data("kendoChart").refresh();
        }
        else if (tokenGrafica == 2) {
            tokenGrafica = 0;
        }

    }

    function years_change() {
        $("#meses").data("kendoDropDownList").dataSource.read();
    }

    function grid_dataBound() {
        readGrafica();
    }

    function months_dataBound() {
        meses = $("#meses").data("kendoDropDownList");
        if (yToken == 0) {
            yToken = 1;
            meses.select(meses.dataSource.data().length - 1);
        }
        if (firstRender == 1) {
            $("#filtroList").data("kendoDropDownList").dataSource.read();
            firstRender = 0;
        }
    }

    //Se encarga de ajustar la tabla para rellenar la pantalla
    function ajustarAltoTabla() {
        pageSize = $(".panel-body").height();
        doc = $(document).height() - 189;
        contentSize = $(".k-grid-content").height();
        if (pageSize < doc) {
            newSize = doc - pageSize;
            $(".k-grid-content").height(contentSize + newSize);
        }
    }

    function GenerarReporte() {
        $("#GridRendimientoMensual").data("kendoGrid").dataSource.read();
        if (selected > 0 && readExcels == 1) {
            readExcels = 0;
        }
    }

    function BorrarExcels() {
        readExcels = 0;
        $.post("../ReporteRendimientoMensual/BorrarExcels");
        dt = [];
        selected = 0;
        $("#limpiarArchivos").attr("disabled", false);
    }

    function LimpiarArchivos() {
        $("#excels").data("kendoUpload").clearAllFiles();
        BorrarExcels();
    }

    $(document).ready(function () {
        ajustarAltoTabla();
        BorrarExcels();
    });

    function compararEmpresas(a, b) {
        if (a.cells[1] < b.cells[1]) {
            return -1;
        }
        if (a.cells[1] > b.cells[1]) {
            return 1;
        }
        return 0;
    }

    function compararTipoVehiculo(a, b) {
        if (a.cells[0] < b.cells[0]) {
            return -1;
        }
        if (a.cells[0] > b.cells[0]) {
            return 1;
        }
        return 0;
    }

    function grid_ExportExcel(e) {
        //e.workbook.sheets[0].rows[1].cells[0].rowSpan = 2;
        /*
        var filas = e.workbook.sheets[0].rows;
        console.log(filas);
        var header = filas.splice(0, 1)[0];
        filas.sort(comparar);
        filas.splice(0, 0, header);
        console.log(filas);
        cantFilas = filas.length;
        var empresa = "";
        var empresaIndex = 0;
        var rowSpan = 0;
        for (i = 1; i < cantFilas; i++) {
            var tituloEmpresa = filas[i].cells[1];
            if (tituloEmpresa != empresa) {
                empresa = tituloEmpresa;
                empresaIndex = i;
                rowSpan = 1;
            } else if (tituloEmpresa == empresa) {
                rowSpan++;
                filas[empresaIndex].cells[1].rowSpan = rowSpan;
                filas[i].cells.splice(1, 1);
            }
        }
        */
        //var a = filas[1].cells[0];
        //var b = filas[1].cells[1];
        //filas[1].cells[0] = b;
        //filas[1].cells[1] = a;
        //filas[1].cells.splice(0, 1);
        //console.log(e.workbook.sheets[0].rows);
        //e.preventDefault();

        var filtro = $("#tipoGrid").data("kendoDropDownList").value();

        if (filtro == "2") {
            var filas = e.workbook.sheets[0].rows;
            if (filas.length > 1) {
                //var header = filas.splice(0, 1);
                var header = filas.splice(0, 1)[0];
                //header.splice(0, 0, header);
                //console.log(header);
                header.cells.height = 45;
                //Se le da estilo a las cabeceras del archivo excel
                for (i = 0; i < header.cells.length; i++) {
                    header.cells[i].textAlign = "center";
                    header.cells[i].verticalAlign = "center";
                    header.cells[i].background = "#366092";
                    header.cells[i].wrap = true;
                    header.cells[i].color = "#FFFFFF";
                    header.cells[i].borderBottom = new Object();
                    header.cells[i].borderBottom.size = 2;
                }
                //Se ordena la data por tipo de vehiculo
                filas.sort(compararEmpresas);
                var cantFilas = filas.length;
                var part1 = null;
                var cantSplice = 0;
                var nombreTemp = filas[0].cells[0].value;
                var empresaIndex = 0;
                //Se recorre todo el arreglo
                for (i = 0; i < cantFilas; i++) {
                    cantSplice++;
                    if (nombreTemp != filas[i].cells[0].value) {
                        cantSplice = i;
                        break;
                    }
                }
                //Se parte el arreglo en dos secciones
                part1 = filas.splice(0, cantSplice);
                var rowSpan = 1;
                /***************** Primera mitad del arreglo *****************/
                //Se ordena una mitad del arreglo por empresas
                part1.sort(compararEmpresas);
                var cantPart1 = part1.length; //Se gaurda la cantidad de registros
                var empresa = part1[0].cells[1].value;
                if (cantPart1 > 0) {
                    //Se ordena la primera mitad del arreglo por empresa
                    for (i = 1; i < cantPart1; i++) {
                        var tituloEmpresa = part1[i].cells[1].value;
                        if (tituloEmpresa != empresa) {
                            empresa = tituloEmpresa;
                            empresaIndex = i;
                            rowSpan = 1;
                        } else if (tituloEmpresa == empresa) {
                            rowSpan++;
                            part1[empresaIndex].cells[1].rowSpan = rowSpan;
                            part1[empresaIndex].cells[1].textAlign = "center";
                            part1[empresaIndex].cells[1].verticalAlign = "center";
                            part1[i].cells.splice(1, 1);
                        }
                    }
                    for (i = 1; i < cantPart1; i++) {
                        part1[i].cells.splice(0, 1); //Se borran los nombres repetidos del tipo de vehiculo
                    }
                }
                //console.log(part1);
                //console.log(filas);
                //console.log(e.workbook.sheets[0].rows);
                /***************** Segunda mitad del arreglo *****************/
                var cantPart2 = filas.length;
                rowSpan = 1;
                empresaIndex = 0;
                //console.log(cantPart2);
                if (cantPart2 > 0) {
                    empresa = filas[i].cells[1].value[0];
                    //Se ordena la segunda mitad del arreglo por empresa
                    for (i = 1; i < cantPart2; i++) {
                        var tituloEmpresa = filas[i].cells[1].value;
                        if (tituloEmpresa != empresa) {
                            empresa = tituloEmpresa;
                            empresaIndex = i;
                            rowSpan = 1;
                        } else if (tituloEmpresa == empresa) {
                            rowSpan++;
                            filas[empresaIndex].cells[1].rowSpan = rowSpan;
                            filas[i].cells.splice(1, 1);
                        }
                    }
                    for (i = 0; i < cantPart2; i++) {
                        filas[i].cells.splice(0, 1); //Se borran los nombres repetidos del tipo de vehiculo
                    }
                }
                if (part1.length > 0) {
                    //Se agrega la cantidad de filas que abarcará cada tipo de vehiculo en la tabla
                    part1[0].cells[0].rowSpan = cantPart1;
                }
                if (filas.length > 0) {
                    //Se agrega la cantidad de filas que abarcará cada tipo de vehiculo en la tabla
                    filas[0].cells[0].rowSpan = cantPart2;
                }
                //Se unen las listas y se agrega la cabecera de la información
                filas = part1.concat(filas);

                //Se centra el contenido de las columnas de cada fila
                for (i = 0; i < filas.length; i++) {
                    for (j = 0; j < filas[i].cells.length; j++) {
                        filas[i].cells[j].textAlign = "center";
                        filas[i].cells[j].verticalAlign = "center";
                        filas[i].cells[j].borderBottom = new Object();
                        filas[i].cells[j].borderBottom.size = 1;
                        filas[i].cells[j].borderRight = new Object();
                        filas[i].cells[j].borderRight.size = 1;
                        filas[i].cells[j].borderLeft = new Object();
                        filas[i].cells[j].borderLeft.size = 1;

                    }
                }

                //Se agregan las cabeceras
                //filas.splice(0, 0, header[0]);
                filas.splice(0, 0, header);

                var fila = new Object();
                fila.type = "data";
                fila.cells = new Array();
                var cell = new Object();
                cell.background = "#8CD34F";
                cell.color = "#FFFFFF";
                cell.colSpan = 9;
                cell.value = "RENDIMIENTO MENSUAL - POR TIPO DE FLOTA & COMPAÑÍA";
                cell.bold = true;
                cell.height = 25;
                cell.textAlign = "center";
                cell.verticalAlign = "center";
                fila.cells.push(cell);

                filas.splice(0, 0, fila);

                //filas.splice(0, 0, header[1]);
                e.workbook.sheets[0].rows = filas;
                //Se establece el ancho de cada una de las columnas del archivo excel
                //e.workbook.sheets[0].rows[0].cells.borderBottom.size = 3;
                e.workbook.sheets[0].columns[0].width = 95;
                e.workbook.sheets[0].rows[0].cells[0].borderBottom = new Object();
                e.workbook.sheets[0].rows[0].cells[0].borderBottom.size = 2;
                e.workbook.sheets[0].columns[1].width = 70;
                e.workbook.sheets[0].columns[2].width = 65;
                e.workbook.sheets[0].columns[3].width = 100;
                e.workbook.sheets[0].columns[4].width = 100;
                e.workbook.sheets[0].columns[5].width = 135;
                e.workbook.sheets[0].columns[6].width = 110;
                e.workbook.sheets[0].columns[7].width = 95;
                e.workbook.sheets[0].columns[8].width = 105;
                for (i = 0; i < e.workbook.sheets[0].columns; i++) {
                    e.workbook.sheets[0].columns[i].autoWidth = false;
                }
                console.log(e.workbook.sheets[0].columns);
                //console.log(filas);
                //console.log(e.workbook.sheets[0].rows);
                //e.preventDefault();
                //console.log(filas);
                //console.log(e.workbook.sheets[0].rows);
            }
            else {
                e.preventDefault();
                GenerarMensaje("Aviso", "No hay datos para exportar a excel.", 3);
            }
        }
    }

    function tipoGrid_Change() {
        var filtro = $("#tipoGrid").data("kendoDropDownList").value();
        var grid = $("#GridRendimientoMensual").data("kendoGrid");
        switch (filtro) {
            case "1":
                grid.hideColumn(0); //Tipo de flota
                grid.showColumn(1); //Distribucion de area
                grid.showColumn(2); //Empresa
                grid.hideColumn(3); //Año
                grid.showColumn(4); //Mes
                grid.showColumn(5); //Area
                grid.showColumn(6); //Estatus
                grid.showColumn(7); //Tipo de vehiculo
                grid.showColumn(8); //Equipo
                grid.showColumn(9); //Kilometros recorridos(KM)
                grid.showColumn(10); //Galones consumidos (GAL)
                grid.showColumn(11); //Monto pagado
                grid.showColumn(12); //Rendimiento KM/GAL
                grid.showColumn(13); //Utilizacion(%)
                grid.showColumn(14); //Costo por galon
                break;

            case "2":
                grid.showColumn(0); //Tipo de flota
                grid.hideColumn(1); //Distribucion de area
                grid.showColumn(2); //Empresa
                grid.showColumn(3); //Año
                grid.showColumn(4); //Mes
                grid.hideColumn(5); //Area
                grid.hideColumn(6); //Estatus
                grid.hideColumn(7); //Tipo de vehiculo
                grid.hideColumn(8); //Equipo
                grid.showColumn(9); //Kilometros recorridos(KM)
                grid.showColumn(10); //Galones consumidos (GAL)
                grid.showColumn(11); //Monto pagado
                grid.showColumn(12); //Rendimiento KM/GAL
                grid.hideColumn(13); //Utilizacion(%)
                grid.showColumn(14); //Costo por galon
                break;
        }
        //grid.dataSource.read();
    }

</script>

<div class="page-wrapper">
    <div class="panel panel-default" style="height:100%;">
        <div class="panel-heading">
            <h3 class="font-bold no-margins">
                Reporte de Rendimiento Mensual
            </h3>
            <small>Desde éste módulo podrá generar reportes de rendimiento por mes.</small>
        </div>
        <div class="panel-body" style="height: 100%;">
            <div class="col-lg-12" style="height: 100%;">
                <div class="row" style="height: 100%; margin-bottom: 5px; margin-top: -10px;">
                    <span class="pull-left" style="width: 38%;">
                        <label>Archivos excel con porcentaje de utilización y de kilometraje:</label>@Archivo()
                        <br />
                        <label>Año:&nbsp;</label>@Years()
                        <label>Mes:&nbsp;</label>@Meses()
                    </span>
                    <span class="pull-right" style="width: 50%;">
                        @FiltroList()<label class="pull-right" style="padding-top: 5px;">Grafica por:&nbsp;&nbsp;</label>
                        <br />
                        <br />
                        @Estadisticas()
                    </span>
                </div>
                <div class="row" style="height: 100%;">
                    <span id="filtrosControles" class="text-right">
                        <br />
                        <button id="limpiarArchivos" type="button" class="btn btn-w-m btn-primary btn-sm" onclick="LimpiarArchivos()" disabled>Limpiar archivos</button>
                        <button type="button" class="btn btn-w-m btn-primary btn-sm" onclick="GenerarReporte()">Generar reporte</button>
                        @tipoGrid()<label class="pull-right" style="padding-top: 5px;">Vista de tabla por:&nbsp;&nbsp;</label>
                    </span>
                    <div class="m-t-sm" style="height: 100%">
                        <div class="row" style="height: 100%;">
                            <div class="col-md-12" style="height: 100%; margin-top: 10px;">
                                @GridRendimientoMensual()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@helper Archivo()
{
    @(Html.Kendo().Upload()
        .Name("excels")
        .Async(
            a => a.Save("GuardarExcel", "ReporteRendimientoMensual")
            //.AutoUpload(true)
            .AutoUpload(true)
        )
        .Events(
            e => e.Select("excels_select")
        )
        .Multiple(true)
        //.Validation(v => v.AllowedExtensions(new string[] { ".xlsx", "xls" }))
        .HtmlAttributes(new { style = "width: 100%;" })
    )
}

@helper Years()
{
    @(Html.Kendo().DropDownList()
        .Name("years")
        .DataValueField("Value")
        .DataTextField("Text")
        .HtmlAttributes(new { style = "width: 165px;" })
        .DataSource(
            dt => dt.Read("ObtenerYears", "Global")
        )
        .Events(e => e.Change("years_change"))
    )
}

@helper Meses()
{
    @(Html.Kendo().DropDownList()
        .Name("meses")
        .DataValueField("Value")
        .DataTextField("Text")
        .HtmlAttributes(new { style = "width: 165px;" })
        .DataSource(
            dt => dt.Read(r => r.Action("ObtenerMeses", "Global").Data("getYear"))
        )
        .Events(e => e.DataBound("months_dataBound"))
    )
}

@helper GridRendimientoMensual()
{
    @(Html.Kendo().Grid<CombustibleAES.Models.ReporteRendimientoMensual>()
        .Name("GridRendimientoMensual")
        .AutoBind(false)
        .Columns(col =>
        {
            col.Bound(c => c.TipoVehiculo).Title("Tipo de Flota").Hidden();
            col.Bound(c => c.DistribucionArea).Title("Distribución de Área").Width(200);
            col.Bound(c => c.Empresa).Title("Empresa").Width(200);
            col.Bound(c => c.year).Title("Año").Hidden().Width(200);
            col.Bound(c => c.Mes).Title("Mes").Width(200);
            col.Bound(c => c.Area).Title("Area").Width(200);
            col.Bound(c => c.EstadoVehiculo).Title("Estatus").Width(200);
            col.Bound(c => c.TipoVehiculo).Title("Tipo de Vehículo").Width(200);
            col.Bound(c => c.Equipo).Title("Equipo").Width(200);
            col.Bound(c => c.KilometrosRecorridos).Title("Kilometros Recorridos (KM)").Width(200);
            col.Bound(c => c.GalonesConsumidos).Title("Galones Consumidos (GAL)").Width(200);
            col.Bound(c => c.MontoPagado).Title("Monto Pagado ($)").Width(200);
            col.Bound(c => c.RendimientoKM_Galon).Title("Rendimiento (KM/GAL)").Width(200);
            col.Bound(c => c.Utilizacion).Title("Utilización (%)").Width(200);
            col.Bound(c => c.CostoPorGalon).Title("Costo por Galón ($)").Width(200);
        })
        .Filterable(f => f
            .Mode(GridFilterMode.Row)
            .Operators(ops => ops.
                ForString(str => str
                    .Clear()
                    .Contains("Contiene")
                    .IsEqualTo("Es igual a")
                )
            )
        )
        .Selectable(s => s.Enabled(false))
        .Excel(excel => excel.AllPages(true).FileName("RpteRendimientoMensual.xlsx"))
        .Mobile(MobileMode.Auto)
        .Sortable()
        .Pageable(x =>
        {
            x.Enabled(true);
            x.PreviousNext(true);
            x.PageSizes(true);
            x.Info(true);
            x.Input(true);
            x.Numeric(false);
            x.PageSizes(new List<object> { 20, 30, 40, 50, 100 }).Refresh(false);

        })
        .NoRecords(nr => nr.Template("<h1 style='   font-color: gray;'>No hay registros para mostrar.</h1>"))
        .ToolBar(tb => tb.Excel().Text("Exportar a Excel"))
        .Scrollable()
        .DataSource(ds => ds.Ajax().PageSize(100).Read(r => r.Action("ObtenerRendimientoMensual", "ReporteRendimientoMensual").Data("get_filtro")))
        .Events(e => e.DataBound("grid_dataBound").ExcelExport("grid_ExportExcel"))
    )
}

@helper Estadisticas()
{
    @(Html.Kendo().Chart<CombustibleAES.Models.GraficaRendimientoMensual>()
        .Name("grafica")
        .Title("")
        .AutoBind(false)
        .Legend(legend => legend
            .Position(ChartLegendPosition.Top)
        )
        .DataSource(ds => ds
            .Read(read => read.Action("ObtenerEstadisticas", "ReporteRendimientoMensual").Data("getFiltroGrafica"))
            //.Sort(sort => sort.Add("X").Ascending())
        )
        .Series(series =>
        {
            series.Column(model => model.Y).Name("Total").CategoryField("X");
        })
        .CategoryAxis(axis => axis
            .Labels(Labels => Labels.Rotation(-45))
        )
        .ValueAxis(axis => axis.Numeric()
            .Labels(labels => labels.Format("${0:N2}"))
            .MajorUnit(10000)
            .Max(70000)
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("${0:N2}")
        )
        .HtmlAttributes(new { Class = "pull-right", style = "width: 100%" })
        .Events(e => e.Render("grafica_render").DataBound("grafica_dataBound"))
    )
}

@helper FiltroList()
{
    @(Html.Kendo().DropDownList()
        .Name("filtroList")
        .DataTextField("Nombre")
        .DataValueField("Id")
        .DataSource(ds => ds.Read(r => r.Action("ObtenerTipoFiltros", "ReporteRendimientoMensual")))
        .AutoBind(true)
        .HtmlAttributes(new { style = "width: 27%;", Class = "pull-right" })
        .Events(e => e.Change("filtro_Change").DataBound("filtro_dataBound"))
    )
}

@helper tipoGrid()
{
    @(Html.Kendo().DropDownList()
        .Name("tipoGrid")
        .DataTextField("Nombre")
        .DataValueField("Id")
        .DataSource(ds => ds.Read(r => r.Action("ObtenerTipoGrid", "ReporteRendimientoMensual")))
        .AutoBind(true)
        .HtmlAttributes(new { style = "width: 12%;", Class = "pull-right" })
        .Events(e => e.Change("tipoGrid_Change")/*.DataBound("filtro_dataBound")*/)
    )
}